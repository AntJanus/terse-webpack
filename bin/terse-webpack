#!/usr/bin/env node

const fs = require("fs");
const http = require("http");
const path = require("path");

const { description, name, version } = require("../package.json");

const loadLocal = (file) => {
  try {
    return fs.readFileSync(path.join(process.cwd(), file), "utf8");
  } catch (e) {
    return false;
  }
}

const loadExample = (file) => {
  return fs.readFileSync(path.join(__dirname, "..", "example", file), "utf8")
};

const server = http.createServer((req, res) => {
  const { body, method, url } = req;

  switch (`${method} ${url}`) {
    case "GET /":
      return view(req, res);

    case "GET /favicon.ico":
      return res.end();

    case "PUT /save":
      return save(req, res);
    default:
      console.error(`Unhandled request: ${method} ${url}`);
  }
});

const save = (req, res) => {
  let body = "";

  req.on("data", (chunk) => body += chunk.toString());
  req.on("end", () => {
    const { content, file } = JSON.parse(body);

    fs.writeFileSync(path.join(process.cwd(), file), content);
    res.writeHead(201);
    res.end();
  });
};

const view = (req, res) => {
  const code = fs.readFileSync(path.join(__dirname, "bootstrap.js"), "utf8");

  const files = [
    "src/client.js",
    "src/server.js",
    "webpack.config.babel.js",
    "webpack.config.client.babel.js",
    "webpack.config.server.babel.js",
  ].reduce((files, file) => {
    const existing = loadLocal(file);

    return Object.assign(files, {
      [file]: {
        content: existing || loadExample(file),
        exists: !!existing,
        saved: false,
      },
    });
  }, {});

  res.writeHead(200, {
    "Content-Type": "text/html",
  });

  res.end(`
    <!doctype html>
    <html>
      <head>
        <meta charset="utf-8">
        <meta content="IE=edge" http-equiv="X-UA-Compatible">
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"
        />
        <title>
          Bootstrap â€“ @terse/webpack
        </title>

        <!-- @TODO Attempt to use SystemJS & local FS -->
        <!--
        <script type="text/javascript" src="https://npmcdn.com/systemjs@0.19.27/dist/system.js"></script>
        <script>
          System.config({
            defaultJSExtensions: true,
          });

          System.import("./app");
        </script>
        -->

        <!-- Babel + React -->
        <script type="text/javascript" src="https://npmcdn.com/babel-standalone@6.7.7/babel.min.js"></script>
        <script type="text/javascript" src="https://npmcdn.com/react@15.0.2/dist/react.min.js"></script>
        <script type="text/javascript" src="https://npmcdn.com/react-dom@15.0.2/dist/react-dom.min.js"></script>

        <!-- MobX -->
        <script type="text/javascript" src="https://npmcdn.com/mobx@2.1.7/lib/mobx.umd.min.js"></script>

        <!-- CodeMirror -->
        <script type="text/javascript" src="https://npmcdn.com/codemirror@5.14.2/lib/codemirror.js"></script>
        <script type="text/javascript" src="https://npmcdn.com/codemirror@5.14.2/mode/javascript/javascript.js"></script>
        <script type="text/javascript" src="https://npmcdn.com/react-codemirror@0.2.6/dist/react-codemirror.min.js"></script>
        <link rel="stylesheet" href="https://npmcdn.com/codemirror@5.14.2/lib/codemirror.css">
        <link rel="stylesheet" href="https://npmcdn.com/codemirror@5.14.2/theme/monokai.css">

        <!-- Theme -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.0.26/css/bulma.min.css">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

        <style>
          .CodeMirror { height: auto; }
        </style>
      </head>
      <body>
        <div id="app"></div>

        <script>
          window.__INITIAL_STATE__ = ${JSON.stringify({
            description,
            files,
            name,
            version,
          })};
        </script>

        <script type="text/babel">
          ${code}
        </script>

        <script>
          const scripts = document.querySelectorAll('script[type="text/babel"]');

          [...scripts].forEach(({ innerHTML }) => {
            const { code } = Babel.transform(innerHTML, {
              presets: ["es2015", "react", "stage-1"],
            });

            new Function(code)();
          });
        </script>
      </body>
    </html>
  `);
}

server.listen(3000, () => {
  console.info(`${name} is running: http://localhost:3000/`);
});
